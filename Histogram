#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

typedef struct stack
{
int data;
struct stack* next;

}st;

void push(st** top, int data)
{
    st* new = (st*)malloc(sizeof(st));
    
    new->data = data;
    new->next = *top;
    *top = new;
    
}

int peek(st* top)
{
    return top->data;
}

int empty(st* top)
{
    if(top==NULL)
    {
        return 1;
    }
    return 0;
}
void pop(st** top)
{
    
        st* temp=*top;
        *top=(*top)->next;
        free(temp);
        temp=NULL;    
}

int getMaxArea(int* hist, int n)
{
    int stack[n];
    int top=-1;
    int max_area=0;
    int tp;
    int currarea=0;
    int i;
    while(i<n)
    {
        if(top==-1 || hist[stack[top]]<=hist[i])
        stack[++top]=i++;
        else 
        {
            tp=stack[top];
            --top;
            currarea=hist[tp]*(top==-1?i:i-stack[top]-1);
            if(max_area<currarea)
            max_area=currarea;
        }
    }
    while(top!=-1)
    {
       tp=stack[top];
            --top;
            currarea=hist[tp]*(top==-1?i:i-stack[top]-1);
            if(max_area<currarea)
            max_area=currarea; 
    }
    return max_area;
    
}


int main() {
   
    int n;
    scanf("%d", &n);
    int arr[n];
    int i;
    for(i=0;i<n;i++)
    {
        scanf("%d", &arr[i]);
        
    }
    
    int r = getMaxArea(arr, n);
    printf("%d", r);
    return 0;
}

